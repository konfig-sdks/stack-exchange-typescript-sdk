/* tslint:disable */
/* eslint-disable */
/*
StackExchange

Stack Exchange is a network of 130+ Q&A communities including Stack Overflow.


The version of the OpenAPI document: 2.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SuggestedEditsInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EditApi - axios parameter creator
 * @export
 */
export const EditApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the suggested edits the user identified by access_token has submitted.   This method returns a list of suggested-edits. 
         * @param {string} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object. 
         * @param {'desc' | 'asc'} [order] 
         * @param {string} [max] sort &#x3D; creation &#x3D;&gt; date sort &#x3D; approval &#x3D;&gt; date sort &#x3D; rejection &#x3D;&gt; date 
         * @param {string} [min] sort &#x3D; creation &#x3D;&gt; date sort &#x3D; approval &#x3D;&gt; date sort &#x3D; rejection &#x3D;&gt; date 
         * @param {'creation' | 'approval' | 'rejection'} [sort] 
         * @param {number} [fromdate] Unix date.
         * @param {number} [todate] Unix date.
         * @param {number} [pagesize] 
         * @param {number} [page] 
         * @param {string} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user\&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
         * @param {string} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSuggestedEdits: async (site: string, order?: 'desc' | 'asc', max?: string, min?: string, sort?: 'creation' | 'approval' | 'rejection', fromdate?: number, todate?: number, pagesize?: number, page?: number, filter?: string, callback?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'site' is not null or undefined
            assertParamExists('getUserSuggestedEdits', 'site', site)
            const localVarPath = `/me/suggested-edits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }

            if (min !== undefined) {
                localVarQueryParameter['min'] = min;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = todate;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (site !== undefined) {
                localVarQueryParameter['site'] = site;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/suggested-edits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the suggested edits in the systems.   This method returns a list of suggested-edits.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
         * @param {string} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object. 
         * @param {'desc' | 'asc'} [order] 
         * @param {string} [max] sort &#x3D; creation &#x3D;&gt; date sort &#x3D; approval &#x3D;&gt; date sort &#x3D; rejection &#x3D;&gt; date 
         * @param {string} [min] sort &#x3D; creation &#x3D;&gt; date sort &#x3D; approval &#x3D;&gt; date sort &#x3D; rejection &#x3D;&gt; date 
         * @param {'creation' | 'approval' | 'rejection'} [sort] 
         * @param {number} [fromdate] Unix date.
         * @param {number} [todate] Unix date.
         * @param {number} [pagesize] 
         * @param {number} [page] 
         * @param {string} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user\&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
         * @param {string} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuggestedEdits: async (site: string, order?: 'desc' | 'asc', max?: string, min?: string, sort?: 'creation' | 'approval' | 'rejection', fromdate?: number, todate?: number, pagesize?: number, page?: number, filter?: string, callback?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'site' is not null or undefined
            assertParamExists('listSuggestedEdits', 'site', site)
            const localVarPath = `/suggested-edits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }

            if (min !== undefined) {
                localVarQueryParameter['min'] = min;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = todate;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (site !== undefined) {
                localVarQueryParameter['site'] = site;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/suggested-edits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns suggested edits identified in ids.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for suggested_edit_id on suggested_edit objects.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of suggested-edits. 
         * @param {string} ids Number list (semicolon delimited).
         * @param {string} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object. 
         * @param {'desc' | 'asc'} [order] 
         * @param {string} [max] sort &#x3D; creation &#x3D;&gt; date sort &#x3D; approval &#x3D;&gt; date sort &#x3D; rejection &#x3D;&gt; date 
         * @param {string} [min] sort &#x3D; creation &#x3D;&gt; date sort &#x3D; approval &#x3D;&gt; date sort &#x3D; rejection &#x3D;&gt; date 
         * @param {'creation' | 'approval' | 'rejection'} [sort] 
         * @param {number} [fromdate] Unix date.
         * @param {number} [todate] Unix date.
         * @param {number} [pagesize] 
         * @param {number} [page] 
         * @param {string} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user\&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
         * @param {string} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuggestedEdits_1: async (ids: string, site: string, order?: 'desc' | 'asc', max?: string, min?: string, sort?: 'creation' | 'approval' | 'rejection', fromdate?: number, todate?: number, pagesize?: number, page?: number, filter?: string, callback?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('listSuggestedEdits_1', 'ids', ids)
            // verify required parameter 'site' is not null or undefined
            assertParamExists('listSuggestedEdits_1', 'site', site)
            const localVarPath = `/suggested-edits/{ids}`
                .replace(`{${"ids"}}`, encodeURIComponent(String(ids !== undefined ? ids : `-ids-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }

            if (min !== undefined) {
                localVarQueryParameter['min'] = min;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = todate;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (site !== undefined) {
                localVarQueryParameter['site'] = site;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/suggested-edits/{ids}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EditApi - functional programming interface
 * @export
 */
export const EditApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EditApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the suggested edits the user identified by access_token has submitted.   This method returns a list of suggested-edits. 
         * @param {EditApiGetUserSuggestedEditsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSuggestedEdits(requestParameters: EditApiGetUserSuggestedEditsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SuggestedEditsInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserSuggestedEdits(requestParameters.site, requestParameters.order, requestParameters.max, requestParameters.min, requestParameters.sort, requestParameters.fromdate, requestParameters.todate, requestParameters.pagesize, requestParameters.page, requestParameters.filter, requestParameters.callback, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all the suggested edits in the systems.   This method returns a list of suggested-edits.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
         * @param {EditApiListSuggestedEditsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSuggestedEdits(requestParameters: EditApiListSuggestedEditsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SuggestedEditsInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSuggestedEdits(requestParameters.site, requestParameters.order, requestParameters.max, requestParameters.min, requestParameters.sort, requestParameters.fromdate, requestParameters.todate, requestParameters.pagesize, requestParameters.page, requestParameters.filter, requestParameters.callback, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns suggested edits identified in ids.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for suggested_edit_id on suggested_edit objects.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of suggested-edits. 
         * @param {EditApiListSuggestedEdits0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSuggestedEdits_1(requestParameters: EditApiListSuggestedEdits0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SuggestedEditsInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSuggestedEdits_1(requestParameters.ids, requestParameters.site, requestParameters.order, requestParameters.max, requestParameters.min, requestParameters.sort, requestParameters.fromdate, requestParameters.todate, requestParameters.pagesize, requestParameters.page, requestParameters.filter, requestParameters.callback, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EditApi - factory interface
 * @export
 */
export const EditApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EditApiFp(configuration)
    return {
        /**
         * Returns the suggested edits the user identified by access_token has submitted.   This method returns a list of suggested-edits. 
         * @param {EditApiGetUserSuggestedEditsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSuggestedEdits(requestParameters: EditApiGetUserSuggestedEditsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SuggestedEditsInner>> {
            return localVarFp.getUserSuggestedEdits(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all the suggested edits in the systems.   This method returns a list of suggested-edits.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
         * @param {EditApiListSuggestedEditsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuggestedEdits(requestParameters: EditApiListSuggestedEditsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SuggestedEditsInner>> {
            return localVarFp.listSuggestedEdits(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns suggested edits identified in ids.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for suggested_edit_id on suggested_edit objects.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of suggested-edits. 
         * @param {EditApiListSuggestedEdits0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuggestedEdits_1(requestParameters: EditApiListSuggestedEdits0Request, options?: AxiosRequestConfig): AxiosPromise<Array<SuggestedEditsInner>> {
            return localVarFp.listSuggestedEdits_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserSuggestedEdits operation in EditApi.
 * @export
 * @interface EditApiGetUserSuggestedEditsRequest
 */
export type EditApiGetUserSuggestedEditsRequest = {
    
    /**
    * Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
    * @type {string}
    * @memberof EditApiGetUserSuggestedEdits
    */
    readonly site: string
    
    /**
    * 
    * @type {'desc' | 'asc'}
    * @memberof EditApiGetUserSuggestedEdits
    */
    readonly order?: 'desc' | 'asc'
    
    /**
    * sort = creation => date sort = approval => date sort = rejection => date 
    * @type {string}
    * @memberof EditApiGetUserSuggestedEdits
    */
    readonly max?: string
    
    /**
    * sort = creation => date sort = approval => date sort = rejection => date 
    * @type {string}
    * @memberof EditApiGetUserSuggestedEdits
    */
    readonly min?: string
    
    /**
    * 
    * @type {'creation' | 'approval' | 'rejection'}
    * @memberof EditApiGetUserSuggestedEdits
    */
    readonly sort?: 'creation' | 'approval' | 'rejection'
    
    /**
    * Unix date.
    * @type {number}
    * @memberof EditApiGetUserSuggestedEdits
    */
    readonly fromdate?: number
    
    /**
    * Unix date.
    * @type {number}
    * @memberof EditApiGetUserSuggestedEdits
    */
    readonly todate?: number
    
    /**
    * 
    * @type {number}
    * @memberof EditApiGetUserSuggestedEdits
    */
    readonly pagesize?: number
    
    /**
    * 
    * @type {number}
    * @memberof EditApiGetUserSuggestedEdits
    */
    readonly page?: number
    
    /**
    * #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user\'s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
    * @type {string}
    * @memberof EditApiGetUserSuggestedEdits
    */
    readonly filter?: string
    
    /**
    * All API responses are JSON, we do support JSONP with the callback query parameter. 
    * @type {string}
    * @memberof EditApiGetUserSuggestedEdits
    */
    readonly callback?: string
    
}

/**
 * Request parameters for listSuggestedEdits operation in EditApi.
 * @export
 * @interface EditApiListSuggestedEditsRequest
 */
export type EditApiListSuggestedEditsRequest = {
    
    /**
    * Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
    * @type {string}
    * @memberof EditApiListSuggestedEdits
    */
    readonly site: string
    
    /**
    * 
    * @type {'desc' | 'asc'}
    * @memberof EditApiListSuggestedEdits
    */
    readonly order?: 'desc' | 'asc'
    
    /**
    * sort = creation => date sort = approval => date sort = rejection => date 
    * @type {string}
    * @memberof EditApiListSuggestedEdits
    */
    readonly max?: string
    
    /**
    * sort = creation => date sort = approval => date sort = rejection => date 
    * @type {string}
    * @memberof EditApiListSuggestedEdits
    */
    readonly min?: string
    
    /**
    * 
    * @type {'creation' | 'approval' | 'rejection'}
    * @memberof EditApiListSuggestedEdits
    */
    readonly sort?: 'creation' | 'approval' | 'rejection'
    
    /**
    * Unix date.
    * @type {number}
    * @memberof EditApiListSuggestedEdits
    */
    readonly fromdate?: number
    
    /**
    * Unix date.
    * @type {number}
    * @memberof EditApiListSuggestedEdits
    */
    readonly todate?: number
    
    /**
    * 
    * @type {number}
    * @memberof EditApiListSuggestedEdits
    */
    readonly pagesize?: number
    
    /**
    * 
    * @type {number}
    * @memberof EditApiListSuggestedEdits
    */
    readonly page?: number
    
    /**
    * #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user\'s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
    * @type {string}
    * @memberof EditApiListSuggestedEdits
    */
    readonly filter?: string
    
    /**
    * All API responses are JSON, we do support JSONP with the callback query parameter. 
    * @type {string}
    * @memberof EditApiListSuggestedEdits
    */
    readonly callback?: string
    
}

/**
 * Request parameters for listSuggestedEdits_1 operation in EditApi.
 * @export
 * @interface EditApiListSuggestedEdits0Request
 */
export type EditApiListSuggestedEdits0Request = {
    
    /**
    * Number list (semicolon delimited).
    * @type {string}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly ids: string
    
    /**
    * Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
    * @type {string}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly site: string
    
    /**
    * 
    * @type {'desc' | 'asc'}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly order?: 'desc' | 'asc'
    
    /**
    * sort = creation => date sort = approval => date sort = rejection => date 
    * @type {string}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly max?: string
    
    /**
    * sort = creation => date sort = approval => date sort = rejection => date 
    * @type {string}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly min?: string
    
    /**
    * 
    * @type {'creation' | 'approval' | 'rejection'}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly sort?: 'creation' | 'approval' | 'rejection'
    
    /**
    * Unix date.
    * @type {number}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly fromdate?: number
    
    /**
    * Unix date.
    * @type {number}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly todate?: number
    
    /**
    * 
    * @type {number}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly pagesize?: number
    
    /**
    * 
    * @type {number}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly page?: number
    
    /**
    * #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user\'s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
    * @type {string}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly filter?: string
    
    /**
    * All API responses are JSON, we do support JSONP with the callback query parameter. 
    * @type {string}
    * @memberof EditApiListSuggestedEdits0
    */
    readonly callback?: string
    
}

/**
 * EditApiGenerated - object-oriented interface
 * @export
 * @class EditApiGenerated
 * @extends {BaseAPI}
 */
export class EditApiGenerated extends BaseAPI {
    /**
     * Returns the suggested edits the user identified by access_token has submitted.   This method returns a list of suggested-edits. 
     * @param {EditApiGetUserSuggestedEditsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditApiGenerated
     */
    public getUserSuggestedEdits(requestParameters: EditApiGetUserSuggestedEditsRequest, options?: AxiosRequestConfig) {
        return EditApiFp(this.configuration).getUserSuggestedEdits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all the suggested edits in the systems.   This method returns a list of suggested-edits.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
     * @param {EditApiListSuggestedEditsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditApiGenerated
     */
    public listSuggestedEdits(requestParameters: EditApiListSuggestedEditsRequest, options?: AxiosRequestConfig) {
        return EditApiFp(this.configuration).listSuggestedEdits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns suggested edits identified in ids.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for suggested_edit_id on suggested_edit objects.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of suggested-edits. 
     * @param {EditApiListSuggestedEdits0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditApiGenerated
     */
    public listSuggestedEdits_1(requestParameters: EditApiListSuggestedEdits0Request, options?: AxiosRequestConfig) {
        return EditApiFp(this.configuration).listSuggestedEdits_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
